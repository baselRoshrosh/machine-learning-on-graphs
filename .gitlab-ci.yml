image: debian:latest

stages:
  - build
  - test
  - eval
  - deploy

variables:
  EVAL_SCRIPT_FOLDER: "./extlibs/eval"
  REF_FOLDER: "./extlibs/eval/ref"
  INPUT_FOLDER: "./input"
  OUTPUT_FOLDER: "./output"

build-job:
  stage: build
  variables:
    GIT_DEPTH: 0
  before_script:
    - apt-get update && apt-get install -y git cmake g++ python3 python3-pip
  script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - git submodule update --init --recursive
    - mkdir -p build && cd build
    - cmake .. -DBUILD_TESTS=ON -DPYTHON_EXECUTABLE=/usr/bin/python3
    - make
  artifacts:
    paths:
      - build/

unit-test-job:
  stage: test
  before_script:
    - apt-get update && apt-get install -y cmake g++
  script:
    - cd build
    - ctest --output-on-failure
  dependencies:
    - build-job

lint-test-job:
  stage: test
  script:
    - echo "Linting code... (placeholder)"
    - sleep 1
    - echo "No lint issues found."

prepare-results-job:
  stage: eval
  before_script:
    - apt-get update && apt-get install -y git cmake g++ python3 python3-pip python3-venv
    - python3 -m venv venv && source venv/bin/activate
    - python -m ensurepip --upgrade
    - mkdir -p build && cd build
    - cmake .. -DBUILD_TESTS=OFF
    - make
  script:
    - source venv/bin/activate
    - cd $CI_PROJECT_DIR
    - pip install .
    - python3 scripts/run_strategies_for_eval.py
  artifacts:
    paths:
      - $OUTPUT_FOLDER/
      - venv/
  dependencies:
    - build-job

eval-job:
  stage: eval
  before_script:
    - apt-get update && apt-get install -y python3 python3-pip python3-venv
    - python3 -m venv venv && source venv/bin/activate
    - python -m ensurepip --upgrade
    - pip install -r $EVAL_SCRIPT_FOLDER/requirements.txt
  script:
    - source venv/bin/activate
    - |
      for graph in $(ls $REF_FOLDER); do
        graph_name="${graph%.zip}"
        for strategy in KNN Topo2Vec AttributedDeepwalk; do
          echo "Processing graph: $graph_name with strategy: $strategy"
          python3 $EVAL_SCRIPT_FOLDER/measure-quality.py \
            -i "$graph_name" \
            -rf "$REF_FOLDER/$graph" \
            -ff "$OUTPUT_FOLDER/${graph_name}_${strategy}.txt" \
            -if "$INPUT_FOLDER/graph" --txt
        done
      done
  dependencies:
    - prepare-results-job

deploy-job:
  stage: deploy
  script:
    - echo "Saving compiled binary..."
    - mkdir -p artifacts
    - cp -r build/* artifacts/
  artifacts:
    paths:
      - artifacts/
  dependencies:
    - build-job
