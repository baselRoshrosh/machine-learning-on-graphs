image: debian:latest

stages:
  - build
  - test
  # - prepare-results
  - eval
  - deploy

variables:
  EVAL_SCRIPT_FOLDER: "./extlibs/eval"
  REF_FOLDER: "./extlibs/eval/ref"
  INPUT_FOLDER: "./input"
  OUTPUT_FOLDER: "./output"
  RESULTS_FOLDER: "./results"

build-job:
  stage: build
  variables:
    GIT_DEPTH: 0
  before_script:
    - apt-get update || (sleep 30 && apt-get update)  
    - apt-get install -y git cmake g++ python3 python3-pip
    - if ! command -v git &> /dev/null; then echo "Git not found! Installing manually..." && apt-get install -y git; fi  
    - |
      git submodule update --init --recursive || echo "Warning: Submodule update failed!"
  script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - git submodule update --init --recursive
    - mkdir -p build && cd build
    - cmake .. -DBUILD_TESTS=ON -DPYTHON_EXECUTABLE=/usr/bin/python3
    - make
  artifacts:
    paths:
      - build/
      - semProject/
      - extlibs/eval/

unit-test-job:
  stage: test
  before_script:
    - apt-get update || (sleep 30 && apt-get update)
    - apt-get install -y cmake g++
    - if ! command -v git &> /dev/null; then echo "Git not found! Installing manually..." && apt-get install -y git; fi
  script:
    - cd build
    - ctest --output-on-failure
  dependencies:
    - build-job

lint-test-job:
  stage: test
  script:
    - echo "Linting code... (placeholder)"
    - sleep 1
    - echo "No lint issues found."

# prepare-results-job:
#   image: python
#   stage: prepare-results
#   dependencies:
#     - build-job
#   only:
#     - main
#   before_script:
#     - python -m venv prepare-env
#     - source prepare-env/bin/activate
#     - pip install --upgrade pip && deactivate
#     # Set PYTHONPATH dynamically to the directory containing 'semProject'
#     - export PYTHONPATH=$PYTHONPATH:$CI_PROJECT_DIR/prepare-env/lib/python$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')/site-packages
#   script:
#     - source prepare-env/bin/activate
#     - cd $CI_PROJECT_DIR
#     - pip install .
#     - echo "running strategies:"
#     - python scripts/run_strategies_for_eval.py
#   artifacts:
#     paths:
#       - $OUTPUT_FOLDER/

eval-job:
  image: python
  stage: eval
  only:
    - main
  # dependencies:
  #   - prepare-results-job
  before_script:
    - pip install --upgrade pip
    - python -m venv eval-env
    - source eval-env/bin/activate
    - pip install -r $EVAL_SCRIPT_FOLDER/requirements.txt && deactivate
    - mkdir -p $RESULTS_FOLDER
    # - pip install -r $EVAL_SCRIPT_FOLDER/requirements-full.txt # if NN for measuring should be trained
  script:
    - source eval-env/bin/activate
    # - set -e # stop loop if command fails
    # evaluate each graph x strategy and store in respective file if the reference folder contains files
    - |

      if [ -z "$(ls -A $REF_FOLDER 2>/dev/null)" ]; then
      echo "Error: No reference graphs found in $REF_FOLDER"
      exit 1
      fi

      for graph in "$REF_FOLDER"/*; do
        graph_name="$(basename "$graph" .zip)"
        for strategy in KNN Topo2Vec AttributedDeepwalk; do
          echo "Processing graph: $graph_name with strategy: $strategy"
          cp "$OUTPUT_FOLDER/${graph_name}_${strategy}.txt" "$OUTPUT_FOLDER/${graph_name}_features.txt"
          python3 $EVAL_SCRIPT_FOLDER/measure-quality.py \
            -i "$graph_name" \
            -rf $REF_FOLDER \
            -ff $OUTPUT_FOLDER/$strategy/ \
            -if $INPUT_FOLDER | tee -a $RESULTS_FOLDER/${graph_name}_${strategy}_log.txt
        done
      done
  artifacts:
    paths:
      - $RESULTS_FOLDER
    

deploy-job:
  stage: deploy
  script:
    - echo "Saving compiled binary..."
    - mkdir -p artifacts
    - cp -r build/* artifacts/
  artifacts:
    paths:
      - artifacts/
  dependencies:
    - build-job
