image: debian:latest  # Use Debian which includes Git by default

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - eval
  - deploy

variables:
  EVAL_SCRIPT_FOLDER: "./extlibs/eval"
  REF_FOLDER: "./extlibs/eval/ref"  # Path to the reference folder
  INPUT_FOLDER: "./input"  # Path to the input folder
  OUTPUT_FOLDER: "./output"  # Path to the output folder

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  variables:
    GIT_DEPTH: 0
  before_script:
    - apt-get update && apt-get install -y git cmake g++ python3 python3-pip
  script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - git --version  # Check if Git is installed
    - python3 --version  # Check if Python3 is installed
    - git submodule update --init --recursive  # Ensure submodules are initialized
    - mkdir -p build && cd build
    - cmake .. -DBUILD_TESTS=ON -DPYTHON_EXECUTABLE=/usr/bin/python3  # Python3 and TEST=ON
    - make  # Compiles the project
  artifacts:
    paths:
      - build

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  before_script:
    - apt-get update && apt-get install -y cmake g++
  script:
    - cd build
    - ctest --output-on-failure  # Run tests
  dependencies:
    - build-job  # This job depends on the build job

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... (placeholder)"
    - sleep 1
    - echo "No lint issues found."

prepare-results-job:
  stage: eval
  before_script:
    # Installing python, pip, and python3-venv for creating a virtual environment
    - apt-get update && apt-get install -y git cmake g++
    - apt-get update && apt-get install -y python3 python3-pip python3-venv
    - python3 -m venv venv  # Create a virtual environment
    - source venv/bin/activate  # Activate the virtual environment
    - python -m ensurepip --upgrade  # Ensure pip is up to date
    - mkdir -p build && cd build
    - cmake .. -DBUILD_TESTS=OFF # Python3 and TEST=ON
    - make
  script:
    - cd $CI_PROJECT_DIR # ensure we are in project root dir
    - source venv/bin/activate
    - pip install .
    - python3 scripts/run_strategies_for_eval.py
  dependencies:
    - build-job

eval-job:
  stage: eval
  before_script:
    # Installing python, pip, and python3-venv for creating a virtual environment
    - apt-get update && apt-get install -y python3 python3-pip python3-venv
    - python3 -m venv venv  # Create a virtual environment
    - source venv/bin/activate  # Activate the virtual environment
    - python -m ensurepip --upgrade  # Ensure pip is up to date
    - pip install -r $EVAL_SCRIPT_FOLDER/requirements.txt  # Install dependencies
  script:
    - source venv/bin/activate
    - |
      for graph in $(ls $REF_FOLDER); do
        graph_name="${graph%.zip}"
        for strategy in KNN Topo2Vec AttributedDeepwalk; do
          echo "Processing graph: $graph_name with strategy: $strategy"
          python3 $EVAL_SCRIPT_FOLDER/measure-quality.py -i "$graph_name" -rf "$REF_FOLDER/$graph" -ff "$OUTPUT_FOLDER/${graph_name}_${strategy}.txt" -if "$INPUT_FOLDER/graph" --txt
        done
      done
  dependencies:
    - build-job
    - prepare-results-job

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Saving compiled binary..."
    - ls -la build/  # List all files to see what was compiled
    - mkdir -p artifacts
    - cp -r build/* artifacts/  # Copy all built files to artifacts
  artifacts:
    paths:
      - artifacts/
  dependencies:
    - build-job  # Ensure it gets build artifacts